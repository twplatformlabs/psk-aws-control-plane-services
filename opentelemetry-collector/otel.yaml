receivers:
  # Data sources: logs
  # fluentforward:
  #   endpoint: 0.0.0.0:8006

  # Data sources: traces
  # jaeger:
  #   protocols:
  #     grpc:
  #       endpoint: 0.0.0.0:4317
  #     thrift_binary:
  #     thrift_compact:
  #     thrift_http:

  # Data sources: any application instrumented with opentelemetry
  # otlp:
  #   protocols:
  #     grpc:
  #       endpoint: 0.0.0.0:4317
  #     http:
  #       endpoint: 0.0.0.0:4318

  # Data sources: metrics
  # prometheus:
  #   config:
  #     scrape_configs:
  #       - job_name: 'otelcol'
  #         scrape_interval: 10s
  #         static_configs:
  #           - targets: ['0.0.0.0:8888']
  #         metric_relabel_configs:
  #           - source_labels: [__name__]
  #             regex: '.*grpc_io.*'
  #             action: drop

  # k8s_cluster:
  #   auth_type: serviceAccount
  #   node_conditions_to_report:
  #     - Ready
  #     - MemoryPressure
  #   allocatable_types_to_report:
  #     - cpu
  #     - memory


# processors:
#   batch:

#   k8sattributes:
#     auth_type: 'serviceAccount'
#     extract:
#       metadata: # extracted from the pod
#         - k8s.namespace.name
#         - k8s.pod.name
#         - k8s.pod.start_time
#         - k8s.pod.uid
#         - k8s.deployment.name
#         - k8s.node.name
#       # annotations:
#       #   # Extracts the value of a pod annotation with key `annotation-one` and inserts it as a resource attribute with key `a1`
#       #   - tag_name: a1
#       #     key: annotation-one
#       #     from: pod
#       #   # Extracts the value of a namespaces annotation with key `annotation-two` with regexp and inserts it as a resource  with key `a2`
#       #   - tag_name: a2
#       #     key: annotation-two
#       #     regex: field=(?P<value>.+)
#       #     from: namespace
#       # labels:
#       #   # Extracts the value of a namespaces label with key `label1` and inserts it as a resource attribute with key `l1`
#       #   - tag_name: l1
#       #     key: label1
#       #     from: namespace
#       #   # Extracts the value of a pod label with key `label2` with regexp and inserts it as a resource attribute with key `l2`
#       #   - tag_name: l2
#       #     key: label2
#       #     regex: field=(?P<value>.+)
#       #     from: pod
#     pod_association: # How to associate the data to a pod (order matters)
#       - sources: # First try to use the value of the resource attribute k8s.pod.ip
#           - from: resource_attribute
#             name: k8s.pod.ip
#       - sources: # Then try to use the value of the resource attribute k8s.pod.uid
#           - from: resource_attribute
#             name: k8s.pod.uid
#       - sources: # If neither of those work, use the request's connection to get the pod IP.
#           - from: connection


  EXPORTERS ========

  exporters:

    otlp:
      endpoint: "api.honeycomb.io:443" # US instance
      #endpoint: "api.eu1.honeycomb.io:443" # EU instance
      headers:
        "x-honeycomb-team": "YOUR_API_KEY"

    # Data sources: traces
    # otlp/jaeger:
    #   endpoint: jaeger-server:4317
    #   tls:
    #     cert_file: cert.pem
    #     key_file: cert-key.pem

    # # # Data sources: traces, metrics, logs
    # # # NOTE: Prior to v0.86.0 use `logging` instead of `debug`
    # # debug:
    # #   verbosity: detailed

    # # # Data sources: traces, metrics
    # # opencensus:
    # #   endpoint: otelcol2:55678

    # # Data sources: traces, metrics, logs
    # otlp:
    #   endpoint: otelcol2:4317
    #   tls:
    #     cert_file: cert.pem
    #     key_file: cert-key.pem

    # # Data sources: traces, metrics
    # otlphttp:
    #   endpoint: https://otlp.example.com:4318

    # # Data sources: metrics
    # prometheus:
    #   endpoint: 0.0.0.0:8889
    #   namespace: default

    # # Data sources: metrics
    # prometheusremotewrite:
    #   endpoint: http://prometheus.example.com:9411/api/prom/push
    #   # When using the official Prometheus (running via Docker)
    #   # endpoint: 'http://prometheus:9090/api/v1/write', add:
    #   # tls:
    #   #   insecure: true

    # # Data sources: traces
    # zipkin:
    #   endpoint: http://zipkin.example.com:9411/api/v2/spans


service:
  pipelines:
    traces:
      receivers: [otlp]
      processors: [batch]
      exporters: [otlp]



service:
  pipelines:
    metrics:
      receivers: [opencensus, prometheus]
      processors: [batch]
      exporters: [opencensus, prometheus]
    traces:
      receivers: [opencensus, jaeger]
      processors: [batch, memory_limiter]
      exporters: [opencensus, zipkin]
  telemetry:
    logs:
      level: INFO
      encoding: json
      sampling:
        enabled: true
        tick: 10s
        initial: 10
        thereafter: 100
      output_paths: ["stderr","stdout"]
      error_output_paths: ["stderr","stdout"]
    metrics:
      address: 0.0.0.0:8888




============= to run collector self-output through a pipeline
receivers:
  prometheus:
    config:
      scrape_configs:
        - job_name: 'otelcol'
          scrape_interval: 10s
          static_configs:
            - targets: ['0.0.0.0:8888']
          metric_relabel_configs:
            - source_labels: [__name__]
              regex: '.*grpc_io.*'
              action: drop
exporters:
  debug:
service:
  pipelines:
    metrics:
      receivers: [prometheus]
      exporters: [debug]



===== delpoyment rbac
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: otel-collector-opentelemetry-collector
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: otel-collector-opentelemetry-collector
rules:
  - apiGroups:
      - ''
    resources:
      - events
      - namespaces
      - namespaces/status
      - nodes
      - nodes/spec
      - pods
      - pods/status
      - replicationcontrollers
      - replicationcontrollers/status
      - resourcequotas
      - services
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - apps
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - extensions
    resources:
      - daemonsets
      - deployments
      - replicasets
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - batch
    resources:
      - jobs
      - cronjobs
    verbs:
      - get
      - list
      - watch
  - apiGroups:
      - autoscaling
    resources:
      - horizontalpodautoscalers
    verbs:
      - get
      - list
      - watch
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: otel-collector-opentelemetry-collector
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: otel-collector-opentelemetry-collector
subjects:
  - kind: ServiceAccount
    name: otel-collector-opentelemetry-collector
    namespace: default