version: 2.1

orbs:
  terraform: twdps/terraform@3.0.1
  kube: twdps/kube-ops@1.1.0
  op: twdps/onepassword@3.0.0
  do: twdps/pipeline-events@4.1.0

globals:
  - &context empc-lab
  - &executor-image twdps/circleci-kube-ops:alpine-3.0.0

on-push-main: &on-push-main
  branches:
    only: /main/
  tags:
    ignore: /.*/

on-tag-main: &on-tag-main
  branches:
    ignore: /.*/
  tags:
    only: /.*/

# ============================================================ commands and jobs

commands:

  set-environment:
    description: generate environment credentials and configuration from templates
    parameters:
      cluster:
        description: cluster and tf workspace name
        type: string
    steps:
      - op/env:
          env-file: op.<< parameters.cluster >>.env
      # - op/tpl:
      #     tpl-path: environments
      #     tpl-file: << parameters.cluster >>.auto.tfvars.json
      - kube/op-config:
          op-value: empc-lab/psk-aws-<< parameters.cluster>>/kubeconfig-base64

  run-integration-tests:
    steps:
      - run:
          name: run control plane services integration tests
          command: bash scripts/services_integration_tests.sh

jobs:

  deploy control plane services:
    docker:
      - image: *executor-image
    parameters:
      cluster:
        description: cluster name
        type: string
    steps:
      - checkout
      - set-environment:
          cluster: << parameters.cluster >>
      - run:
          name: install metrics-server
          command: bash scripts/install_metrics_server.sh << parameters.cluster >>
      - run:
          name: install kube-state-metrics
          command: bash scripts/install_kube_state_metrics.sh << parameters.cluster >>
      - run:
          name: install kubernetes-event-exporter
          command: bash scripts/install_event_exporter.sh << parameters.cluster >>
      - run-integration-tests

# ============================================================ workflows

workflows:

  deploy sbx-i01-aws-us-east-1 control plane services:
    when:
      not:
        equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
    jobs:
      - deploy control plane services:
          context: empc-lab
          cluster: sbx-i01-aws-us-east-1
          filters: *on-push-main

  # release prod-i01-aws-us-east-2 control plane base:
  #   jobs:

  #     - do/schedule-pipeline:
  #         name: Deploy sandbox nightly schedule
  #         context: *context
  #         executor-image-name: *executor-image
  #         shell: op run --env-file op.nonprod.env -- /bin/bash -eo pipefail
  #         scheduled-pipeline-name: Nightly VPC validation - sandbox
  #         scheduled-pipeline-description: |
  #           Automatically triggers nightly run of main pipeline for validating sandbox deployment pipeline vpcs
  #         hours-of-day: "[1]"
  #         days-of-week: "[\"SUN\"]"
  #         before-release:
  #           - set-environment:
  #               static: true
  #               env-credentials: nonprod
  #         filters: *on-push-main

  #     - do/schedule-pipeline:
  #         name: Deploy release nightly schedule
  #         context: *context
  #         executor-image-name: *executor-image
  #         shell: op run --env-file op.prod.env -- /bin/bash -eo pipefail
  #         scheduled-pipeline-name: Nightly VPC validation - release
  #         scheduled-pipeline-description: |
  #           Automatically triggers nightly run of main pipeline for validating vpcs in release
  #         hours-of-day: "[1]"
  #         days-of-week: "[\"SUN\"]"
  #         before-release:
  #           - set-environment:
  #               static: true
  #               env-credentials: prod
  #         filters: *on-push-main

  # run nightly sandbox validation jobs:
  #   when:
  #     and:
  #       - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
  #       - equal: [ nightly-sandbox-validation-schedule, << pipeline.schedule.name >> ]
  #   jobs:
  #     - launch-dynamic-pipeline:
  #         name: generate-sandbox-nightly-pipeline
  #         release-pipeline-name: sandbox
  #         custom-template-file: nightly.yml
  #         filters: *on-push-main

  # run nightly release validation jobs:
  #   when:
  #     and:
  #       - equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
  #       - equal: [ nightly-release-validation-schedule, << pipeline.schedule.name >> ]
  #   jobs:
  #     - launch-dynamic-pipeline:
  #         name: generate-platform-nightly-pipeline
  #         release-pipeline-name: release
  #         custom-template-file: nightly.yml
  #         filters: *on-push-main



  # ====================================================== tear down
  # tear down psk control plane base:
  #   when:
  #     not:
  #       equal: [ scheduled_pipeline, << pipeline.trigger_source >> ]
  #   jobs:
  #     - approve tear down:
  #         type: approval
  #         filters: *on-push-main

  #     - terraform/destroy:
  #         name: destroy sbx-i01-aws-us-east-1
  #         context: *context
  #         executor-image: *executor-image
  #         workspace: sbx-i01-aws-us-east-1
  #         before-destroy:
  #           - set-environment:
  #               cluster: sbx-i01-aws-us-east-1
  #         requires:
  #           - approve tear down
  #         filters: *on-push-main
